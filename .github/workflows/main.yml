import React, { useState } from 'react';
import { PenTool, Lightbulb, Target, ArrowRight, Copy, Check } from 'lucide-react';

const ColumnGenerator = () => {
  const [topic, setTopic] = useState('');
  const [keywords, setKeywords] = useState('');
  const [generatedColumn, setGeneratedColumn] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [copied, setCopied] = useState(false);

  const generateColumn = async () => {
    if (!topic.trim() || !keywords.trim()) {
      alert('주제와 키워드를 모두 입력해주세요.');
      return;
    }

    setIsGenerating(true);
    
    try {
      const response = await fetch("https://api.anthropic.com/v1/messages", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "claude-sonnet-4-20250514",
          max_tokens: 2000,
          messages: [
            {
              role: "user",
              content: `다음 조건에 따라 칼럼을 작성해주세요:

주제: ${topic}
키워드: ${keywords}

칼럼 구조:
1. 제목: 키워드를 포함하여 문제를 제기하는 제목
2. 서론: 문제 상황을 구체적으로 제시
3. 본문: 
   - 키워드를 자연스럽게 포함
   - 해결법 제시
   - 관련 근거와 사례 포함
4. 결론:
   - 콜투액션 (독자가 취해야 할 행동)
   - 새로운 문제 제기 (더 깊이 생각할 거리)

다음 JSON 형식으로 응답해주세요:
{
  "title": "제목",
  "introduction": "서론 내용",
  "body": "본문 내용 (여러 문단)",
  "conclusion": "결론 내용",
  "callToAction": "구체적인 행동 요청",
  "newQuestion": "새로운 문제 제기"
}

응답은 반드시 유효한 JSON 형식이어야 하며, 다른 텍스트는 포함하지 마세요.`
            }
          ]
        })
      });

      const data = await response.json();
      let responseText = data.content[0].text;
      
      // JSON 코드 블록 마커 제거
      responseText = responseText.replace(/```json\n?/g, "").replace(/```\n?/g, "").trim();
      
      const columnData = JSON.parse(responseText);
      setGeneratedColumn(columnData);
    } catch (error) {
      console.error("칼럼 생성 중 오류 발생:", error);
      alert("칼럼 생성 중 오류가 발생했습니다. 다시 시도해주세요.");
    } finally {
      setIsGenerating(false);
    }
  };

  const copyToClipboard = async () => {
    if (!generatedColumn) return;

    const fullText = `${generatedColumn.title}

${generatedColumn.introduction}

${generatedColumn.body}

${generatedColumn.conclusion}

${generatedColumn.callToAction}

${generatedColumn.newQuestion}`;

    try {
      await navigator.clipboard.writeText(fullText);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('복사 실패:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <PenTool className="w-8 h-8 text-indigo-600 mr-3" />
            <h1 className="text-3xl font-bold text-gray-800">칼럼 생성기</h1>
          </div>
          <p className="text-gray-600">주제와 키워드를 입력하면 전문적인 칼럼을 자동으로 생성합니다</p>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
          <div className="grid md:grid-cols-2 gap-6 mb-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <Lightbulb className="w-4 h-4 inline mr-1" />
                주제
              </label>
              <input
                type="text"
                value={topic}
                onChange={(e) => setTopic(e.target.value)}
                placeholder="예: 디지털 디톡스의 필요성"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <Target className="w-4 h-4 inline mr-1" />
                키워드
              </label>
              <input
                type="text"
                value={keywords}
                onChange={(e) => setKeywords(e.target.value)}
                placeholder="예: 스마트폰 중독, 정신건강, 디지털 웰빙"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
              />
            </div>
          </div>

          <button
            onClick={generateColumn}
            disabled={isGenerating || !topic.trim() || !keywords.trim()}
            className="w-full bg-indigo-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center"
          >
            {isGenerating ? (
              <div className="flex items-center">
                <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent mr-2"></div>
                칼럼 생성 중...
              </div>
            ) : (
              <div className="flex items-center">
                <ArrowRight className="w-5 h-5 mr-2" />
                칼럼 생성하기
              </div>
            )}
          </button>
        </div>

        {generatedColumn && (
          <div className="bg-white rounded-xl shadow-lg p-8">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold text-gray-800">생성된 칼럼</h2>
              <button
                onClick={copyToClipboard}
                className="flex items-center px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
              >
                {copied ? (
                  <>
                    <Check className="w-4 h-4 mr-2 text-green-600" />
                    <span className="text-green-600">복사됨!</span>
                  </>
                ) : (
                  <>
                    <Copy className="w-4 h-4 mr-2" />
                    <span>복사하기</span>
                  </>
                )}
              </button>
            </div>

            <div className="space-y-6">
              {/* 제목 */}
              <div className="border-l-4 border-indigo-500 pl-4">
                <h3 className="text-sm font-medium text-gray-500 mb-2">제목</h3>
                <h4 className="text-xl font-bold text-gray-800">{generatedColumn.title}</h4>
              </div>

              {/* 서론 */}
              <div className="border-l-4 border-green-500 pl-4">
                <h3 className="text-sm font-medium text-gray-500 mb-2">서론</h3>
                <p className="text-gray-700 leading-relaxed">{generatedColumn.introduction}</p>
              </div>

              {/* 본문 */}
              <div className="border-l-4 border-blue-500 pl-4">
                <h3 className="text-sm font-medium text-gray-500 mb-2">본문</h3>
                <div className="text-gray-700 leading-relaxed whitespace-pre-line">{generatedColumn.body}</div>
              </div>

              {/* 결론 */}
              <div className="border-l-4 border-purple-500 pl-4">
                <h3 className="text-sm font-medium text-gray-500 mb-2">결론</h3>
                <p className="text-gray-700 leading-relaxed">{generatedColumn.conclusion}</p>
              </div>

              {/* 콜투액션 */}
              <div className="border-l-4 border-orange-500 pl-4 bg-orange-50 p-4 rounded-r-lg">
                <h3 className="text-sm font-medium text-gray-500 mb-2">콜투액션</h3>
                <p className="text-gray-700 font-medium">{generatedColumn.callToAction}</p>
              </div>

              {/* 새로운 문제 제기 */}
              <div className="border-l-4 border-red-500 pl-4 bg-red-50 p-4 rounded-r-lg">
                <h3 className="text-sm font-medium text-gray-500 mb-2">새로운 문제 제기</h3>
                <p className="text-gray-700 font-medium italic">{generatedColumn.newQuestion}</p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ColumnGenerator;
